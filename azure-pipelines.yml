trigger: none  # No automatic triggers; run manually

# Parameters for user input
parameters:
  - name: resource_group_name
    type: string
    default: "aks_tf_rg1"
    displayName: "Resource Group Name"

  - name: location
    type: string
    default: "EastUS"
    displayName: "Location"
    values:
    - "EastUS"
    - "WestUS"
    - "CentralUS"

  - name: cluster_name
    type: string
    default: "my-aks-cluster-new"
    displayName: "Cluster Name"

  - name: kubernetes_version
    type: string
    default: "1.27.7"
    displayName: "Kubernetes Version"

  - name: system_node_count
    type: number
    default: 2
    displayName: "System Node Count"

# Define the pool
pool:
  vmImage: 'ubuntu-latest'

# Variables
variables:
  terraformVersion: '1.3.0'  # Specify the Terraform version you are using

# Steps
steps:
- stage: Setup
  jobs:
  - job: InstallTerraform
    steps:
    - script: |
        echo "Installing Terraform..."
        curl -o terraform.zip https://releases.hashicorp.com/terraform/${{ variables.terraformVersion }}/terraform_${{ variables.terraformVersion }}_linux_amd64.zip
        unzip terraform.zip
        sudo mv terraform /usr/local/bin/
        terraform version
      displayName: 'Install Terraform'

- stage: GenerateTfvars
  dependsOn: InstallTerraform
  jobs:
  - job: GenerateTfvarsFile
    steps:
    - script: |
        echo 'Generating terraform.tfvars file...'
        echo 'resource_group_name = "${{ parameters.resource_group_name }}"' > terraform.tfvars
        echo 'location = "${{ parameters.location }}"' >> terraform.tfvars
        echo 'cluster_name = "${{ parameters.cluster_name }}"' >> terraform.tfvars
        echo 'kubernetes_version = "${{ parameters.kubernetes_version }}"' >> terraform.tfvars
        echo 'system_node_count = ${{ parameters.system_node_count }}' >> terraform.tfvars
      displayName: 'Generate terraform.tfvars file'
    
    - script: |
        echo 'Displaying terraform.tfvars content...'
        cat terraform.tfvars
      displayName: 'Display terraform.tfvars file'

- stage: TerraformInitPlan
  dependsOn: GenerateTfvarsFile
  jobs:
  - job: InitPlan
    steps:
    - script: |
        echo "Initializing and planning Terraform..."
        terraform init
        terraform plan -out=tfplan -input=false -var-file=terraform.tfvars
      displayName: 'Terraform Init and Plan'
      workingDirectory: $(System.DefaultWorkingDirectory)/path/to/terraform  # Update this to the correct path

- stage: ApplyTerraform
  dependsOn: InitPlan
  jobs:
  - job: Apply
    steps:
    - script: |
        echo "Applying Terraform plan..."
        terraform apply -input=false -auto-approve -var-file=terraform.tfvars
      displayName: 'Terraform Apply'
      workingDirectory: $(System.DefaultWorkingDirectory)/path/to/terraform  # Update this to the correct path

    - script: |
        echo "Capturing Terraform outputs..."
        terraform output -json > terraform-output.json
      displayName: 'Capture Terraform Outputs'

    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)/terraform-output.json'
        artifactName: 'terraform-outputs'
      displayName: 'Publish Terraform Outputs'